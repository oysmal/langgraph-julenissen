import random
import streamlit as st

from typing import Annotated
from typing_extensions import TypedDict

from langgraph.checkpoint.postgres import PostgresSaver
from langchain_core.runnables import RunnableConfig
from langchain_core.messages import AIMessage, HumanMessage
from langgraph.graph import StateGraph, START, END
from langgraph.graph.state import CompiledStateGraph
from langgraph.prebuilt import ToolNode
from langgraph.graph.message import add_messages
from langchain_openai import ChatOpenAI

### Streamlit UI ###

st.set_page_config(page_title="Julenissen", page_icon="üéÖ")
st.title("Chat med julenissen")

## SECRETS

DB_URI = st.secrets["db_uri"]

### LangGraph ###

greeting_msg = AIMessage(content="""Ho-ho-ho, hallo der, sm√• og store! üéÖ‚ú®

Det er meg, Julenissen ‚Äì den digitale versjonen, klar for √• h√∏re p√• √∏nskelistene deres og f√• en statusrapport p√• snille og slemme handlinger i √•r. Jeg m√• bare si det: Med s√• mange barn √• holde styr p√•, har jeg n√• effektivisert julemagien. S√• her er greia:

‚úÖ Alle med samme navn er snille eller slemme sammen. S√• hvis du heter Ola og det finnes en annen Ola som har v√¶rt skikkelig rampete, m√• dere snakke sammen om √• skjerpe dere. üôÉ

‚úÖ F√∏r jeg sjekker hva du f√•r til jul, m√• du fortelle meg √©n snill eller slem ting du har gjort i √•r. Alt blir notert i listen ‚Äì og ja, jeg sjekker den to ganger!

‚úÖ Snille barn f√•r kanskje det de √∏nsker seg, mens slemme barn‚Ä¶ vel, dere kjenner til kull i str√∏mpen, ikke sant? üß¶üî•

S√• kom igjen! Fortell meg navnet ditt, √∏nskelisten din, og en god eller d√•rlig gjerning. Husk, du er en ambassad√∏r for navnet ditt, s√• v√¶r snill mot deg selv og alle andre med samme navn. Ho-ho-ho!

Hvis du vil se hvordan ditt navn ligger an, sjekk listen v√•r over snille og slemme navn p√• nettsiden. üéÑ

S√•! Hva heter du, og hva har du gjort som er snilt og slemt i √•r? üéÅ""")

system_prompt = "Du er en humoristisk og ironisk digital versjon av julenissen, med godt hum√∏r, men litt sliten av √• holde styr p√• s√• mange barn. Barn kan fortelle deg navnet sitt, √∏nskelisten sin og eventuelt hva de har gjort som var snilt og slemt. Via tilkoblede verkt√∏y har du tilgang til √• sjekke om barn er snille og slemme barn. Du har ogs√• tilgang til √• registrere gode og slemme ting du blir fortalt om. Dersom du f√•r oppgitt et navn b√∏r du s√∏rge for √• generere et verkt√∏y-kall (med mindre du allerede har det i meldingshistorikken). Det har blitt for slitsom √• finne ut om hvert enkelt barn er snilt eller slemt, s√• du baserer deg n√• p√• at alle barn med samme navn er like snill eller slem. P√• grunn av effektiviseringbehov ber du ogs√• alle du snakker med om √• si en snill eller slem ting de har gjort i √•r f√∏r de f√•r tilbakemelding p√• hva de f√•r til jul. Svaret p√• dette m√• du huske √• registrere p√• navnet via det riktige verkt√∏yet (husk √• sende detaljert beskrivelse av hva de har gjort). Dersom du registrerer en god eller d√•rlig handling m√• du husk √• sjekke listen p√• nytt. Til slutt gir du tilbakemelding om barnet skal f√• det de √∏nsker seg. Snille barn f√•r kanskje det de √∏nsker seg, mens slemme barn f√•r kull. Fortell alle om den nye m√•ten du holder styr p√• snille og slemme barn, og husk √• oppfordre alle til √• v√¶re en god representant for navnet sitt. De kan ogs√• se de snilleste og slemmeste navnene i listen p√• denne nettsiden."

llm = ChatOpenAI(model="gpt-4o")

class State(TypedDict):
    messages: Annotated[list, add_messages]

def check_naughty_list(name: str, config: RunnableConfig):
    """Call with a name, to check if the name is on the naughty list."""
    print("Checking naughty list for: ", name)

    conn = config.get("configurable", {}).get("conn")
    if not conn:
        return "En feil oppstod n√•r jeg sjekket listen"
    try:
        with conn._cursor() as cur:
            cur.execute("SELECT nice_meter from naughty_nice where name=%s", (name,))
            res = cur.fetchall()
            nice_meter = res[0]["nice_meter"]
            if float(nice_meter) > 0:
                return f"{name} er p√• listen over snille barn."
            else:
                return f"{name} er p√• slemmelisten!"
    except Exception as e:
        print("Error: ", e)
        return "Feil ved √• lese listen"

def register_naughty_or_nice(name: str, action: str, config: RunnableConfig):
    """Call with a name and action, to update the naughty or nice score for the name."""
    print("Name and action: ", name, action)
    res = llm.invoke([("system", f"""Du er julenissen, og du skal oppdatere listen over snille barn. Ranger handlinger som d√•rlig eller god, p√• en skala fra -100 til 100, hvor -100 er veldig slemt, og 100 er veldig snilt. √Ö st√∏vsuge kan for eksempel v√¶re 5 poeng, mens si et stygt ord er -5 poeng. √Ö gi gave til fattige er flere poeng, v√¶re i en sl√•sskamp er flere minuspoeng, osv. Du skal bare returnere tallverdien til handlingen, slik du vurderer den.

Eksempel input: Nils: Jeg har st√∏vsuget.
Eksempel respons: 5

Eksempel input: Nora: Jeg dyttet en person.
Eksempel respons: -10

Input: {name}{action}
Respons, BARE tallverdi:""")])
    nice_score = res.content
    print("Nice score: ", nice_score)

    conn = config.get("configurable", {}).get("conn")
    if not conn:
        print("No connection found in config")
        raise ValueError("No connection found in config")
    try:
        with conn._cursor() as cur:
            # Upsert the score by Name
            res = cur.execute(
                "INSERT INTO naughty_nice (name, nice_meter) VALUES (%s, %s) ON CONFLICT (name) DO UPDATE SET nice_meter = naughty_nice.nice_meter + EXCLUDED.nice_meter, updates = naughty_nice.updates + 1 RETURNING *",
                (name, nice_score)
            )
            print("Upsert result: ", res)
    except Exception as e:
        print("Error: ", e)
        conn.rollback()
        raise e

    return "Handling er registrert"

tools = [check_naughty_list, register_naughty_or_nice]
tool_node = ToolNode(tools)

llm_with_tools = ChatOpenAI(model="gpt-4o").bind_tools(tools)

def should_call_tool(state: State):
    messages = state["messages"]
    last_message = messages[-1]
    if not last_message.tool_calls:
        return END
    print("Tool calls:", last_message.tool_calls)
    return "tools"

def santa(state: State, config: RunnableConfig):
    response = llm_with_tools.invoke(
            [("system", system_prompt), *state["messages"]],
            config)
    return { "messages": [response]}

graph_builder = StateGraph(State)

# Add nodes
graph_builder.add_node("santa", santa)
graph_builder.add_node("tools", tool_node)

# Add edges
graph_builder.add_edge(START, "santa")
graph_builder.add_conditional_edges(
        "santa", should_call_tool, {"tools": "tools", END: END, })
graph_builder.add_edge("tools", "santa")

def get_response(graph: CompiledStateGraph, user_input: str, thread_id: str, checkpointer: PostgresSaver):
    config = { "configurable": { "thread_id": thread_id, "conn": checkpointer } }
    print("Config: ", config)
    return graph.stream(
            { "messages": [("user", user_input)] },
            config,
            stream_mode="messages")

def transform_response_to_text(response_generator):
    """
    Transform the AI message chunks from get_response into plain text.
    """
    for message, metadata in response_generator:
        if metadata["langgraph_node"] == "santa":
            yield message.content # Extract and yield plain text

def run_graph(graph: CompiledStateGraph, checkpointer: PostgresSaver):
    if "thread_id" not in st.session_state:
        st.session_state.thread_id = str(random.randint(0, 1000000))

    config = { "configurable": { "thread_id": st.session_state.thread_id, "conn": checkpointer } }
    print("Thread ID: ", st.session_state.thread_id)

    state = graph.get_state(config).values

    if not "messages" in state or len(state["messages"]) == 0:
        graph.update_state(config, { "messages": [greeting_msg] })
        state = graph.get_state(config).values


    if "messages" in state:
        for message in state["messages"]:
            if message.content and isinstance(message, AIMessage):
                with st.chat_message("Julenissen"):
                    st.write(message.content)
            elif message.content and isinstance(message, HumanMessage):
                with st.chat_message("Deg"):
                    st.write(message.content)

    user_input = st.chat_input("Skriv din melding til Julenissen her")
    if user_input is not None and user_input != "":
        st.session_state.query = HumanMessage(user_input)

        with st.chat_message("Deg"):
            st.markdown(user_input)

        with st.chat_message("Julenissen"):
            response_generator = get_response(graph, user_input, st.session_state.thread_id, checkpointer)
            transformed_response = transform_response_to_text(response_generator)
            st.write_stream(transformed_response)

def run():
    with PostgresSaver.from_conn_string(DB_URI) as checkpointer:
        checkpointer.setup()
        with checkpointer._cursor() as cur:
            cur.execute("CREATE TABLE IF NOT EXISTS naughty_nice (name TEXT PRIMARY KEY, nice_meter INT, updates INT DEFAULT 1)")

        graph = graph_builder.compile(checkpointer=checkpointer)
        run_graph(graph, checkpointer)

run()
